// MIT License
//
// lzasm: a runtime assembler
// Copyright 2021 Thomas Mathys
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <boost/test/unit_test.hpp>
#include <string>
#include <vector>
#include "lzasm/arm/arm32/divided_thumb_assembler.hpp"
#include "assembler_test_utilities.hpp"

namespace lzasm_unittest
{

using namespace std::string_literals;
using namespace ::lzasm::arm::arm32;

// Dump of the raw intro compressed with Shrinkler, without GBA header and shrinkler depacker.
static const unsigned char compressed_intro[] =
{
    0x9f, 0xd6, 0xff, 0xc7, 0xfd, 0xc6, 0x42, 0x43, 0x3c, 0xa0, 0xa8, 0xef, 0xb7, 0xef, 0xb7, 0xe1,
    0x54, 0x36, 0xd2, 0xed, 0x45, 0xbd, 0x12, 0x4b, 0x5b, 0x3b, 0x69, 0xca, 0x3e, 0xa0, 0x95, 0x8e,
    0x6d, 0xf3, 0xa8, 0x82, 0x3e, 0xdf, 0xb2, 0xb7, 0xab, 0x7a, 0xc4, 0xcf, 0x77, 0xf8, 0x28, 0x1a,
    0x72, 0x46, 0x73, 0x5a, 0xa1, 0x59, 0xc4, 0xa3, 0x43, 0xff, 0x95, 0x1e, 0x83, 0xb7, 0xc1, 0x56,
    0x4b, 0x3b, 0x6b, 0x09, 0x0b, 0x4c, 0x94, 0x64, 0x36, 0xb6, 0x68, 0xc2, 0x21, 0x68, 0x6f, 0x02,
    0xd3, 0x53, 0xf9, 0xe4, 0x7c, 0xa9, 0x12, 0x49, 0x0d, 0x4d, 0x4b, 0x19, 0x53, 0x75, 0x0e, 0x4b,
    0x4b, 0x8f, 0x39, 0x90, 0xf6, 0xc9, 0xbd, 0x5d, 0x3f, 0x7f, 0x5f, 0xf5, 0x1a, 0x8d, 0x0c, 0xda,
    0xce, 0x0a, 0x94, 0xb7, 0x30, 0xe4, 0xe0, 0x27, 0x49, 0x7e, 0x3b, 0x33, 0xa1, 0x0a, 0x1e, 0xb2,
    0x56, 0xc5, 0x04, 0x87, 0xa1, 0xe7, 0xcd, 0x28, 0x2f, 0x14, 0xd3, 0xed, 0xae, 0x29, 0x18, 0x49,
    0x52, 0xb0, 0x80, 0x2d, 0x13, 0x1f, 0x61, 0x95, 0x96, 0xd1, 0x40, 0x9c, 0xb5, 0x38, 0x43, 0xa2,
    0xc8, 0x2c, 0x98, 0x73, 0xf5, 0x75, 0x1e, 0x22, 0xc3, 0xe4, 0xdb, 0x26, 0xf6, 0xba, 0x49, 0x6f,
    0x0a, 0x55, 0x35, 0x49, 0xeb, 0xfd, 0x26, 0x3c, 0x35, 0x74, 0xe7, 0xbe, 0xa8, 0x83, 0x09, 0xe2,
    0xa5, 0x06, 0x6f, 0xce, 0xf4, 0xd6, 0x6d, 0xa6, 0x83, 0x2e, 0x33, 0x94, 0xdf, 0x40, 0xa6, 0x7a,
    0xe6, 0xc5, 0xc9, 0xc9, 0xff, 0x0a, 0xc1, 0xd4, 0xb6, 0x5e, 0x89, 0xb7, 0x98, 0xb6, 0xdd, 0x04,
    0x2b, 0xcd, 0x8d, 0xb5, 0x4c, 0x19, 0xa3, 0x04, 0x05, 0x3e, 0x0f, 0x58, 0xa5, 0xd3, 0xb5, 0x8c,
    0x22, 0x7f, 0x90, 0x58, 0x7e, 0xc3, 0xbb, 0x4d, 0xf0, 0x69, 0xf6, 0xdb, 0xbe, 0x25, 0x9d, 0x4e,
    0x3a, 0x42, 0x31, 0x88, 0x70, 0x32, 0x79, 0x4d, 0x09, 0xf0, 0x04, 0x0f, 0x4e, 0x24, 0xc1, 0x8d,
    0x15, 0x3b, 0xd2, 0xa8, 0xd5, 0x18, 0xbd, 0x9b, 0xca, 0xf9, 0xe6, 0x3c, 0xe8, 0xf5, 0xd8, 0x5b,
    0x61, 0xf3, 0xd0, 0x34, 0xbf, 0x6c, 0xdc, 0xf5, 0x8d, 0x98, 0x3a, 0x5e, 0x6c, 0xae, 0x2f, 0x21,
    0x7e, 0xe1, 0x17, 0xa6, 0x98, 0x32, 0x29, 0xc7, 0xf6, 0x53, 0xdd, 0x62, 0xbe, 0x56, 0xac, 0x31,
    0x1c, 0x70, 0xd0, 0x54, 0x4b, 0xb3, 0x9b, 0xb0, 0x7f, 0x16, 0xa4, 0xba, 0xac, 0x0d, 0x8f, 0x65,
    0xec, 0x08, 0x98, 0x72, 0xc2, 0x22, 0x96, 0x28, 0x31, 0xea, 0xdf, 0x2d, 0x53, 0x8e, 0xdb, 0xff,
    0xc7, 0x35, 0xff, 0xa4, 0x38, 0xde, 0x5f, 0x1c, 0x0e, 0x65, 0xa1, 0xd5, 0x8e, 0xa6, 0x21, 0x0e,
    0x05, 0x44, 0xb8, 0x65, 0x75, 0x68, 0xa0, 0x4a, 0x6e, 0x45, 0xd6, 0xfe, 0xe7, 0xcc, 0xf6, 0xc6,
    0x8b, 0x55, 0x40, 0xd2, 0x9a, 0x2c, 0x18, 0x60, 0x2f, 0xe4, 0x26, 0xae, 0xda, 0x7a, 0xa8, 0x36,
    0x8e, 0x85, 0xe1, 0xd4, 0x48, 0x95, 0x43, 0x55, 0x7d, 0xf4, 0xa2, 0xe7, 0xf9, 0x06, 0x0f, 0x6a,
    0x65, 0xee, 0xef, 0xcc, 0x51, 0xeb, 0x63, 0xb9, 0x0d, 0xdf, 0x8b, 0x73, 0xb8, 0x6b, 0x41, 0xa2,
    0xf7, 0x45, 0xf5, 0xe4, 0x81, 0xb2, 0xcc, 0x12, 0x13, 0x3b, 0x84, 0xc4, 0x52, 0x1a, 0x41, 0x3c,
    0xcb, 0x20, 0x6b, 0x43, 0x84, 0x66, 0xe4, 0x1a, 0xec, 0x5a, 0x08, 0x4a, 0x96, 0x57, 0x7c, 0x80,
    0x1c, 0xa9, 0xe5, 0x18, 0x35, 0x3e, 0x3b, 0x61, 0x43, 0xe5, 0x4d, 0x13, 0x4f, 0x44, 0xda, 0x2a,
    0x36, 0x33, 0xb3, 0x4c, 0x2b, 0xec, 0x4e, 0x9c, 0xa9, 0xf1, 0xe6, 0xb9, 0x43, 0x3a, 0x6e, 0xfc,
    0x6f, 0x48, 0xc7, 0xb1, 0x06, 0x56, 0x44, 0x65, 0x70, 0x76, 0x7d, 0xa1, 0xa9, 0xc3, 0x5e, 0x68,
    0xf4, 0xcc, 0x49, 0x07, 0x48, 0x8e, 0xd0, 0xa2, 0xd2, 0xde, 0xb1, 0x5a, 0xc4, 0x24, 0x68, 0x92,
    0x27, 0xd2, 0x49, 0xd8, 0xc3, 0x5d, 0xae, 0x92, 0x11, 0x49, 0x99, 0x71, 0x57, 0x87, 0x2e, 0x1f,
    0x00, 0x4b, 0x27, 0x63, 0x4f, 0xb1, 0x1e, 0x2c, 0xf6, 0x8c, 0x53, 0x91, 0x9d, 0x39, 0xbe, 0x5a,
    0xeb, 0xf4, 0x1e, 0xb4, 0x56, 0x45, 0x2f, 0xf7, 0x90, 0xb4, 0xa4, 0x51, 0xb8, 0xb5, 0x4b, 0x88,
    0x2d, 0xd3, 0x16, 0xee, 0x37, 0x0a, 0x96, 0x54, 0x96, 0x7d, 0xdc, 0x6e, 0x00, 0xd8, 0xfd, 0x7d,
    0xdb, 0x1a, 0x3c, 0xe2, 0xb3, 0xef, 0xe3, 0xa8, 0xe8, 0x33, 0xab, 0x19, 0xaf, 0xd2, 0x83, 0x64,
    0x02, 0x5f, 0x02, 0x01, 0x71, 0x8f, 0x66, 0xa9, 0xc9, 0x79, 0x13, 0xb0, 0xff, 0x9e, 0x92, 0x83,
    0xc6, 0x43, 0x75, 0x7a, 0x5c, 0xcd, 0x38, 0x68, 0xb2, 0x3d, 0x9a, 0xa1, 0xc1, 0xed, 0x29, 0xf5,
    0xfc, 0x60, 0x60, 0x96, 0xef, 0x76, 0x91, 0xee, 0xab, 0x75, 0x2f, 0xe1, 0x89, 0xfc, 0x02, 0xec,
    0x70, 0xee, 0xe6, 0x3c, 0x9f, 0xd1, 0x0e, 0x7b, 0xe1, 0x6c, 0x46, 0xe2, 0x48, 0xaf, 0x83, 0x33,
    0x65, 0x0a, 0x0f, 0x68, 0xc1, 0x8b, 0xa7, 0x12, 0xd3, 0xeb, 0x68, 0x68, 0xdd, 0x69, 0x6f, 0x10,
    0xc1, 0x57, 0xb6, 0x76, 0x27, 0xb9, 0xf4, 0x7e, 0x51, 0x66, 0x5a, 0x6f, 0x90, 0xd1, 0xd5, 0xaf,
    0x4d, 0xbd, 0xe0, 0x6b, 0x01, 0x65, 0xb8, 0x18, 0xc2, 0x66, 0xd3, 0x38, 0xc1, 0x3e, 0x47, 0x8d,
    0x2c, 0xe2, 0xfd, 0x7c, 0x57, 0x20, 0x67, 0x54, 0x67, 0xc2, 0x44, 0x98, 0xd2, 0x30, 0x46, 0xca,
    0x62, 0xc4, 0xa9, 0xf9, 0x4c, 0x41, 0x64, 0xd7, 0x9d, 0x25, 0x57, 0xf6, 0x27, 0x37, 0x70, 0xd0,
    0x64, 0xed, 0x47, 0x19, 0xd3, 0x82, 0x62, 0x60, 0x21, 0xa0, 0x63, 0x8a, 0x6d, 0x44, 0x83, 0xdb,
    0x0f, 0x4d, 0x2d, 0x81, 0xb1, 0x49, 0xbb, 0xe5, 0xef, 0x38, 0x9e, 0x40, 0x23, 0xe5, 0x37, 0x48,
    0x98, 0x56, 0x54, 0x46, 0xb9, 0x9c, 0x1b, 0x79, 0x22, 0xf2, 0x9f, 0xb5, 0x4c, 0xb8, 0x5b, 0xe0,
    0xb2, 0xc2, 0xf9, 0x66, 0xe0, 0xd6, 0x5c, 0xbd, 0xad, 0xeb, 0xa9, 0x38, 0xde, 0x9b, 0x4e, 0x0d,
    0xaf, 0xed, 0x7b, 0xb0, 0x6c, 0xe2, 0xb2, 0x49, 0x45, 0xcf, 0x12, 0xf6, 0xde, 0x74, 0x95, 0x7a,
    0xd8, 0xa4, 0xad, 0xb5, 0xfa, 0x79, 0x62, 0xb7, 0x29, 0x9c, 0x05, 0x98, 0xf9, 0xc4, 0x14, 0xe7,
    0xab, 0x40, 0x46, 0x1f, 0x86, 0x9b, 0xe2, 0xa0, 0x20, 0x6e, 0x82, 0x55, 0xf2, 0x53, 0x5b, 0x67,
    0xfc, 0x57, 0x23, 0x58, 0x1f, 0x3f, 0x78, 0xf0, 0xfe, 0x29, 0x60, 0x98, 0xbd, 0xa6, 0x27, 0x67,
    0x92, 0x1e, 0x5c, 0x62, 0x48, 0x8d, 0xbb, 0x3a, 0xad, 0x73, 0xf9, 0x5c, 0x3c, 0x32, 0xec, 0x81,
    0xea, 0x52, 0x60, 0x28, 0xf4, 0xee, 0x85, 0xf7, 0xcf, 0xcf, 0x7a, 0xf9, 0x52, 0xeb, 0xda, 0xe6,
    0x09, 0x96, 0x1a, 0xff, 0x13, 0x3a, 0x6d, 0xef, 0x02, 0x10, 0x79, 0x45, 0xdf, 0x4f, 0xc6, 0x7f,
    0x62, 0xa7, 0xff, 0x7e, 0x79, 0x4e, 0x96, 0xbf, 0xbb, 0x49, 0x32, 0xd3, 0x19, 0x0d, 0xa1, 0xa5,
    0x11, 0x30, 0x81, 0xb0, 0xfe, 0x5a, 0x23, 0xd2, 0x17, 0x4b, 0x09, 0x56, 0x35, 0x21, 0x34, 0xec,
    0xa0, 0x4b, 0x53, 0x55, 0x10, 0xba, 0x16, 0x9e, 0x69, 0x27, 0xea, 0x42, 0xeb, 0x2e, 0xe1, 0x56,
    0xd1, 0x84, 0x7e, 0x56, 0xc9, 0xf1, 0x22, 0xf3, 0x6a, 0x5d, 0xbe, 0x9d, 0x85, 0x22, 0xcc, 0xe5,
    0x06, 0xac, 0x01, 0x7d, 0x4e, 0x3d, 0x61, 0x82, 0xe2, 0xae, 0x80, 0x41, 0xba, 0xb7, 0x63, 0xb6,
    0x4d, 0x04, 0x87, 0x30, 0x83, 0x00, 0x17, 0x1f, 0x2f, 0xb9, 0x97, 0x3b, 0xc1, 0x37, 0x59, 0xe2,
    0x11, 0xa2, 0x15, 0x6f, 0xec, 0xbb, 0xa6, 0x51, 0x10, 0x5e, 0xd4, 0x01, 0x23, 0x2b, 0xfa, 0xae,
    0xf8, 0xcd, 0x8d, 0xdc, 0x1b, 0xac, 0x9f, 0x9c, 0xae, 0x88, 0x3c, 0x54, 0x7c, 0x84, 0xf7, 0xe3,
    0x49, 0x92, 0x84, 0x2f, 0xd3, 0x62, 0x98, 0x7b, 0xc5, 0x64, 0xfa, 0x0b, 0xbe, 0x8f, 0x16, 0x8c,
    0xab, 0x1f, 0xcc, 0x21, 0xfc, 0x68, 0x82, 0x01, 0xd1, 0x71, 0x69, 0xba, 0xc5, 0xa0, 0xac, 0xad,
    0xe6, 0x1a, 0x08, 0xb8, 0x9a, 0x48, 0xb8, 0xef, 0x83, 0xd1, 0x2a, 0x9a, 0x37, 0x42, 0xd2, 0x14,
    0x37, 0x25, 0x39, 0x4d, 0x39, 0x3e, 0xbd, 0xb0, 0x53, 0xa2, 0x58, 0x71, 0x4c, 0xef, 0xcb, 0xf5,
    0x94, 0x1a, 0x0b, 0x42, 0x7a, 0x25, 0xee, 0x4a, 0x68, 0xf9, 0x50, 0xe1, 0xb9, 0xef, 0x2a, 0xe1,
    0xf1, 0x9d, 0x3a, 0x76, 0xbe, 0xfe, 0x66, 0x4c, 0x96, 0xed, 0xcb, 0x55, 0x3d, 0x01, 0x71, 0x96,
    0xf1, 0x71, 0xaf, 0xe9, 0xc1, 0xed, 0x72, 0x1c, 0x81, 0x6c, 0x2f, 0x84, 0xbf, 0x42, 0x06, 0x20,
    0x01, 0xbb, 0x8a, 0xb5, 0xe0, 0x15, 0x36, 0x7d, 0x4c, 0xe2, 0x45, 0x85, 0xbf, 0xfc, 0xf3, 0x7c,
    0x3b, 0xdd, 0x14, 0xd9, 0x5a, 0x2b, 0x68, 0x5f, 0xb0, 0xce, 0xcf, 0x6b, 0x1f, 0x35, 0xe4, 0x60,
    0x78, 0xdb, 0x1d, 0x77, 0xe6, 0x47, 0x68, 0xff, 0x9a, 0x57, 0x28, 0x5f, 0x4f, 0xe5, 0x0e, 0x88,
    0x7d, 0x4d, 0xd6, 0x27, 0xcf, 0x96, 0xd5, 0xa1, 0x17, 0x6a, 0x2c, 0x9c, 0xf1, 0xc0, 0xc2, 0x65,
    0x4b, 0x07, 0x66, 0x1a, 0xad, 0x92, 0xdd, 0xbd, 0xa6, 0x1c, 0x67, 0x0a, 0x0a, 0x30, 0x7d, 0xd7,
    0x5d, 0x64, 0xb7, 0x18, 0xb7, 0x19, 0x59, 0x0b, 0x36, 0xa4, 0xba, 0x06, 0xff, 0x54, 0x5a, 0xe4,
    0x58, 0x47, 0x69, 0xd0, 0xfb, 0x5c, 0xb5, 0x11, 0x3f, 0xba, 0xc3, 0x2a, 0xa9, 0xd5, 0x32, 0x16,
    0x47, 0x22, 0x5e, 0x76, 0x42, 0xc6, 0xd4, 0x3c, 0xd2, 0xf7, 0x08, 0xa0, 0x04, 0x3a, 0xf8, 0x77,
    0x6d, 0xc6, 0xda, 0x6f, 0xb2, 0xff, 0x87, 0x18, 0xc6, 0x55, 0x5d, 0xd1, 0x33, 0x5b, 0x5e, 0xe8,
    0x65, 0x6a, 0x1d, 0x9e, 0xb4, 0x3e, 0x02, 0x76, 0x84, 0x55, 0xf0, 0x6c, 0xc5, 0x13, 0x43, 0xae,
    0xe7, 0xd9, 0xcf, 0x07, 0xe1, 0x59, 0x84, 0x56, 0x6b, 0x39, 0xad, 0xb3, 0x0b, 0x76, 0xda, 0x46,
    0x33, 0xc3, 0x13, 0x23, 0xf0, 0x31, 0x28, 0x0a, 0x41, 0x11, 0x3b, 0x2e, 0x5e, 0x13, 0x42, 0x71,
    0xad, 0x05, 0x8a, 0x66, 0x41, 0xe3, 0xe7, 0x49, 0x21, 0xb0, 0x85, 0x57, 0xf2, 0xbc, 0xfc, 0x3d,
    0x4a, 0xd7, 0xf8, 0xc6, 0x00, 0x88, 0xfc, 0x9d, 0xb4, 0xed, 0xaf, 0x1d, 0x85, 0x38, 0x23, 0xb5,
    0xcf, 0xa2, 0x51, 0x95, 0xc0, 0x37, 0x86, 0xa1, 0x80, 0xe7, 0x3b, 0x80, 0x7a, 0xc5, 0x69, 0x17,
    0x7f, 0xcd, 0x51, 0xf3, 0x74, 0xd1, 0x3a, 0xd9, 0xe3, 0x2b, 0x70, 0x5d, 0x07, 0xc0, 0x1e, 0x0c,
    0xe4, 0xca, 0xa6, 0xb4, 0xa4, 0x87, 0xf7, 0xac, 0xc5, 0x0d, 0xdf, 0x0d, 0x8b, 0x6c, 0x2e, 0xcc,
    0xf3, 0xd6, 0xac, 0xbd, 0xe9, 0x8c, 0xf3, 0xe3, 0xa5, 0xf7, 0x52, 0x5d, 0xb0, 0xb1, 0xab, 0xd9,
    0xef, 0x28, 0x92, 0x0d, 0x2f, 0xed, 0x38, 0x83, 0x64, 0x02, 0xdd, 0x84, 0x68, 0xef, 0x3e, 0x9c,
    0x01, 0x9c, 0x16, 0xa2, 0xc2, 0x67, 0xe1, 0x02, 0x7c, 0x3b, 0x22, 0x26, 0x97, 0xff, 0x32, 0x87,
    0x49, 0xa4, 0xca, 0x58, 0xfb, 0xca, 0x02, 0x97, 0x10, 0x3f, 0x03, 0xc3, 0x46, 0x1e, 0xa1, 0x5e,
    0x20, 0x49, 0x71, 0xca, 0x21, 0x9e, 0x2c, 0x65, 0xb8, 0x06, 0x91, 0x20, 0xea, 0x2d, 0x76, 0x2c,
    0x17, 0x91, 0xcc, 0x58, 0x5f, 0x05, 0xd4, 0x44, 0xed, 0x80, 0xce, 0x5c, 0xd1, 0xd7, 0x7c, 0x94,
    0x79, 0xd5, 0x13, 0xfd, 0x83, 0xd4, 0x62, 0x59, 0xa6, 0x8b, 0x77, 0x34, 0x2a, 0x5f, 0xba, 0xc5,
    0x95, 0xff, 0x31, 0x62, 0xf5, 0x6d, 0x25, 0x48, 0x60, 0xef, 0x3e, 0x1e, 0x75, 0x26, 0x11, 0x38,
    0xb7, 0x3b, 0x87, 0x7f, 0xd2, 0xb5, 0xba, 0xe6, 0x1e, 0x3d, 0x55, 0x26, 0x74, 0x65, 0x19, 0xd0,
    0xb4, 0x67, 0x06, 0x4f, 0x38, 0x42, 0x39, 0xfe, 0x82, 0x3d, 0xc6, 0x84, 0xeb, 0x38, 0x11, 0xe0,
    0x4e, 0x37, 0xc4, 0xbe, 0x08, 0x19, 0xd4, 0xfe, 0xb2, 0x3a, 0x78, 0xd2, 0x2c, 0x72, 0x9d, 0x0f,
    0x80, 0x61, 0x35, 0xce, 0xd7, 0x27, 0x64, 0x30, 0x59, 0x12, 0x73, 0x05, 0xab, 0xa7, 0xc9, 0x2e,
    0x38, 0x4a, 0x03, 0x79, 0x1e, 0x6f, 0xab, 0x20, 0x86, 0x98, 0x02, 0x1b, 0x96, 0x46, 0x3f, 0x5d,
    0xc7, 0x87, 0xea, 0xdd, 0x1f, 0x7d, 0x4c, 0xe8, 0xef, 0x3f, 0xc5, 0xca, 0x3c, 0xa2, 0xb6, 0xbb,
    0x7d, 0xf3, 0xfd, 0xf5, 0xb5, 0x52, 0xda, 0x2d, 0x34, 0x3c, 0x7b, 0x60, 0xf3, 0x8c, 0x56, 0xcb,
    0xc8, 0x8d, 0x02, 0xe8, 0xfb, 0xb0, 0x51, 0x75, 0x2e, 0x75, 0x22, 0xdf, 0x0e, 0xa5, 0x16, 0xc6,
    0xf6, 0x67, 0xe3, 0xdb, 0xa8, 0xd0, 0x90, 0xe4, 0x70, 0xbd, 0xa6, 0x5f, 0xff, 0x14, 0xb5, 0x15,
    0xad, 0xf5, 0xbd, 0x70, 0xa2, 0x31, 0xd9, 0x42, 0x21, 0x39, 0x36, 0xca, 0x4d, 0xc7, 0x69, 0x87,
    0xf6, 0x73, 0x1b, 0xdc, 0x55, 0x41, 0xfc, 0xd7, 0xb4, 0xb3, 0x92, 0xde, 0x0e, 0x31, 0x2f, 0x23,
    0xfe, 0xe5, 0x12, 0xb9, 0x6d, 0x15, 0xa1, 0x88, 0xe3, 0x55, 0x24, 0x30, 0xf5, 0xb9, 0x2f, 0x2a,
    0xf3, 0x54, 0xe3, 0x3b, 0x31, 0xcd, 0x06, 0x10, 0x74, 0xf8, 0x74, 0x84, 0xa6, 0x20, 0xae, 0xe8,
    0xf7, 0x4a, 0x21, 0xc7, 0xd2, 0xcb, 0x15, 0xb8, 0xa1, 0xb4, 0x88, 0x22, 0x01, 0x97, 0x98, 0xea,
    0x84, 0xd8, 0xc3, 0x5c, 0x9a, 0x7c, 0xd4, 0x26, 0x97, 0x55, 0x27, 0x44, 0x50, 0x1d, 0x9d, 0x14,
    0x49, 0x64, 0xc1, 0xb2, 0xd7, 0x16, 0xaf, 0xd3, 0xb2, 0x73, 0x37, 0x23, 0x70, 0x3b, 0xbe, 0x74,
    0x53, 0x89, 0x1f, 0xf8, 0x86, 0x6b, 0x41, 0x65, 0x61, 0xe7, 0xe3, 0x7c, 0x1a, 0xb0, 0xe0, 0x92,
    0x7e, 0x94, 0xec, 0x10, 0x7e, 0x80, 0xb8, 0x68, 0xe3, 0xdf, 0xbc, 0x72, 0x55, 0xf6, 0x1c, 0x83,
    0x1a, 0xb2, 0x33, 0x8d, 0xf3, 0xe7, 0xf4, 0x6a, 0xe8, 0x2c, 0x38, 0x21, 0x9c, 0x03, 0xec, 0x17,
    0x5a, 0x90, 0xb7, 0xfb, 0x23, 0x72, 0x87, 0x7f, 0xba, 0x8b, 0x64, 0x1e, 0xb6, 0x3d, 0xb8, 0xeb,
    0xc4, 0x1d, 0x99, 0xb5, 0x7d, 0x8a, 0x88, 0xbb, 0x7f, 0x52, 0xec, 0xf2, 0x54, 0x9e, 0x58, 0x33,
    0xba, 0xc2, 0x51, 0x7d, 0xb7, 0xd5, 0xff, 0x10, 0x9c, 0xb5, 0x79, 0xa3, 0x1f, 0x2c, 0x35, 0xd4,
    0xc8, 0x67, 0x14, 0x66, 0xe9, 0x12, 0x3a, 0x65, 0xc0, 0xc7, 0x1b, 0xca, 0xb3, 0x49, 0x11, 0x7e,
    0x77, 0xf1, 0xb7, 0x4e, 0xa1, 0xc7, 0xf1, 0x6e, 0xb7, 0xd7, 0x83, 0xed, 0x4c, 0xf4, 0xef, 0xb0,
    0x68, 0x2e, 0x6d, 0x47, 0x6b, 0xdb, 0xa5, 0x72, 0xb8, 0x87, 0x2c, 0x30, 0x77, 0xbe, 0xd1, 0xc5,
    0xa3, 0x70, 0x03, 0x81, 0x47, 0xb4, 0x28, 0x03, 0x4e, 0x73, 0x7a, 0x32, 0x42, 0x69, 0x79, 0x97,
    0x56, 0xa2, 0xf8, 0xd7, 0x4c, 0xe3, 0x6b, 0x75, 0xc4, 0x76, 0x09, 0xf5, 0xa9, 0x5f, 0xaa, 0xd9,
    0xd7, 0x27, 0x05, 0xf8, 0x80, 0x27, 0xbe, 0x66, 0x1f, 0x21, 0xed, 0xea, 0x0b, 0xfe, 0xa9, 0x71,
    0x7f, 0xd1, 0x9c, 0xd9, 0x53, 0x91, 0x60, 0xd1, 0xcf, 0x16, 0x85, 0x27, 0x02, 0x7b, 0x32, 0x5d,
    0x57, 0x8d, 0x50, 0xbb, 0x5e, 0xc9, 0xfe, 0x9e, 0x88, 0xd0, 0xfa, 0x8e, 0x70, 0x6d, 0x33, 0x10,
    0xa7, 0x6c, 0x81, 0x62, 0x03, 0x88, 0x6e, 0xfc, 0x0d, 0x1c, 0x54, 0x4b, 0x5a, 0x2b, 0xf4, 0xba,
    0x06, 0x61, 0xb4, 0x1e, 0xda, 0x65, 0x7f, 0xa8, 0xdb, 0x31, 0x96, 0x70, 0xb0, 0xe1, 0xf5, 0x34,
    0x54, 0x61, 0x09, 0x46, 0xdf, 0xd8, 0x16, 0x3f, 0x4a, 0x99, 0x98, 0xd3, 0xfb, 0xd4, 0x8f, 0x46,
    0xdb, 0xc7, 0x01, 0xd3, 0x34, 0xd1, 0xa4, 0xde, 0x7d, 0x08, 0xfb, 0xac, 0x07, 0xbe, 0xe0, 0xf6,
    0x98, 0xaf, 0x7d, 0x49, 0x4e, 0xa7, 0x4b, 0x9f, 0x52, 0x3c, 0xa2, 0x5c, 0x60, 0x8d, 0x3f, 0x4a,
    0x9f, 0xfa, 0x74, 0x2b, 0x88, 0xf2, 0xde, 0x63, 0x3d, 0xd4, 0x26, 0x56, 0xa2, 0x9b, 0x83, 0xfa,
    0x9b, 0x13, 0x16, 0xa6, 0xb8, 0x58, 0x8d, 0x2d, 0xe8, 0x59, 0x6f, 0x6c, 0x89, 0xc1, 0x09, 0x61,
    0xa6, 0x33, 0x3f, 0xe3, 0x07, 0x57, 0xc8, 0xd3, 0x1b, 0xc6, 0x73, 0x64, 0xb1, 0x9b, 0x9c, 0x4b,
    0x54, 0x45, 0x0b, 0x8e, 0x6d, 0xf3, 0xcf, 0x72, 0x58, 0xa6, 0x21, 0xcc, 0xa0, 0xc2, 0xa0, 0xa1,
    0x92, 0x96, 0x5a, 0x18, 0x2a, 0x22, 0x52, 0x47, 0x9d, 0xb3, 0xd7, 0x79, 0xe9, 0xa0, 0x94, 0x0c,
    0x6f, 0x2c, 0x88, 0x27, 0xf6, 0x86, 0x81, 0x2c, 0x83, 0x44, 0x98, 0xc6, 0x54, 0xee, 0xe7, 0x5b,
    0x72, 0x6e, 0xae, 0x9c, 0xa1, 0x46, 0x24, 0x6d, 0x17, 0x5e, 0x12, 0x3b, 0xef, 0xbb, 0x12, 0x3c,
    0xcf, 0x6c, 0x61, 0xcf, 0x5f, 0x04, 0xf3, 0x39, 0xb5, 0xe9, 0x8e, 0xb0, 0xb0, 0x97, 0xd6, 0x0b,
    0x56, 0x32, 0x99, 0x89, 0xc4, 0x00, 0x45, 0xfd, 0x3f, 0x64, 0x6d, 0x71, 0x1e, 0x29, 0x4e, 0x76,
    0x02, 0x98, 0x2f, 0x99, 0x0b, 0x3c, 0x17, 0xb8, 0x03, 0x68, 0xe7, 0x4d, 0xfa, 0xf1, 0x09, 0x07,
    0xf2, 0x95, 0x48, 0x58, 0x3a, 0xf4, 0x99, 0x87, 0x40, 0x8d, 0x1d, 0xba, 0x6a, 0xfd, 0xb7, 0xfa,
    0xea, 0x78, 0x51, 0x69, 0xb0, 0x99, 0x93, 0x20, 0xd9, 0xd3, 0x2b, 0xe9, 0x13, 0x3f, 0x33, 0x87,
    0x85, 0x66, 0xec, 0xcb, 0x19, 0x68, 0x97, 0xa7, 0x95, 0xdf, 0xf5, 0x79, 0x40, 0xf8, 0xac, 0xfa,
    0xdb, 0x58, 0xc5, 0x0c, 0xf3, 0x54, 0x81, 0xa0, 0x57, 0xca, 0x10, 0x0b, 0xa4, 0xb9, 0xa7, 0x97,
    0x31, 0x1f, 0x1a, 0xcd, 0x6d, 0xe4, 0x93, 0xc3, 0x2d, 0x70, 0x21, 0x0e, 0x9f, 0x27, 0x64, 0xdb,
    0x60, 0x0e, 0x69, 0xc2, 0x58, 0xcc, 0xf9, 0x81, 0x4b, 0xd1, 0xf1, 0x68, 0x4e, 0x10, 0xd1, 0x4a,
    0x55, 0x39, 0xde, 0x05, 0xdd, 0xef, 0xe3, 0x26, 0xdd, 0xbe, 0x83, 0xb8, 0x74, 0x65, 0xee, 0x88,
    0xb5, 0xa2, 0x41, 0xf8, 0x6c, 0x08, 0xc9, 0x5f, 0xcb, 0x1b, 0x67, 0x00, 0x60, 0x89, 0x32, 0x47,
    0xb5, 0x79, 0x6c, 0xf3, 0x27, 0x74, 0xf2, 0x6f, 0xd2, 0x76, 0xd8, 0x47, 0x9c, 0xef, 0x6c, 0x08,
    0x40, 0x1c, 0x98, 0xb8, 0xd8, 0xac, 0x39, 0x51, 0xe8, 0x26, 0x9d, 0x5a, 0xcc, 0xc9, 0x6f, 0xa7,
    0xc3, 0xfd, 0x2c, 0x8a, 0x4b, 0x71, 0x7c, 0x65, 0xe3, 0x26, 0xc8, 0x08, 0xb7, 0xac, 0xd5, 0x55,
    0x58, 0x33, 0xfe, 0x9c, 0xdd, 0x68, 0x32, 0xa2, 0x85, 0x43, 0xbd, 0xde, 0x7e, 0xdd, 0x29, 0xbc,
    0x9e, 0x55, 0x92, 0x86, 0xbc, 0x6e, 0xcd, 0xcc, 0x15, 0x56, 0xb0, 0x85, 0x71, 0xfa, 0x2d, 0x7e,
    0x52, 0xe1, 0xfa, 0xeb, 0x6b, 0xab, 0x9d, 0x46, 0x14, 0xb4, 0x35, 0x69, 0x11, 0x9b, 0x54, 0x00,
    0x9b, 0xb9, 0xdd, 0x29, 0x22, 0xc0, 0xe1, 0xdc, 0x6c, 0x1c, 0x33, 0xd3, 0x01, 0xd5, 0xe6, 0xd6,
    0x9d, 0x62, 0x49, 0xaa, 0x60, 0x7e, 0x68, 0x97, 0xcb, 0xdd, 0xca, 0x49, 0x0a, 0xaf, 0x97, 0xa1,
    0xae, 0x04, 0xb3, 0x75, 0x90, 0x52, 0xd1, 0xab, 0x64, 0x3c, 0x70, 0x1f, 0x27, 0x9c, 0xcf, 0x2c,
    0x09, 0xb9, 0xc3, 0xc5, 0x92, 0xf1, 0x3c, 0xc0, 0xa8, 0x73, 0x7f, 0xa6, 0xc9, 0x1f, 0xcc, 0x59,
    0x3a, 0x82, 0xff, 0x2d, 0x58, 0x70, 0x5c, 0x40, 0x00, 0xed, 0x11, 0xc4, 0x15, 0x2b, 0x06, 0x4c,
    0xb5, 0xdc, 0xcd, 0x57, 0x1f, 0x3d, 0xbe, 0xa0, 0x51, 0xc4, 0xe2, 0x53, 0x92, 0x20, 0x31, 0xdf,
    0x73, 0x2c, 0x89, 0xed, 0xef, 0xc4, 0x9d, 0xb3, 0xc8, 0xc2, 0xb6, 0x17, 0x1a, 0x11, 0x1c, 0xc0,
    0x46, 0x50, 0xcb, 0x7c, 0xd4, 0xe1, 0x7c, 0xa5, 0x05, 0x18, 0xed, 0xf9, 0xc5, 0x31, 0x66, 0x6d,
    0xf6, 0x60, 0xf3, 0x8e, 0xfb, 0xa5, 0x7a, 0xed, 0x8c, 0x27, 0x11, 0x44, 0x42, 0x01, 0x6b, 0x5b,
    0xc2, 0x26, 0x3d, 0xbb, 0x70, 0xad, 0xd9, 0xff, 0x94, 0xc3, 0xc5, 0x2e, 0xf5, 0x9a, 0x48, 0x71,
    0x85, 0x67, 0x37, 0x47, 0xfd, 0x6c, 0x89, 0x2b, 0x07, 0x42, 0xa8, 0xe2, 0x3e, 0xe8, 0x1b, 0xf5,
    0xbd, 0x5a, 0xdb, 0x97, 0xf0, 0x36, 0xab, 0x83, 0x83, 0x1c, 0xaf, 0x82, 0xfb, 0x13, 0x61, 0x7b,
    0xa2, 0xb1, 0x6b, 0x41, 0x00, 0x00, 0xf4, 0x1a
};

// Dump of the .gba file that was assembled and linked with gas and ld.
// This is the compressed intro with the Shrinkler depacker in front of it.
static const unsigned char expected_binary[] =
{
    0x2e, 0x00, 0x00, 0xea, 0x24, 0xff, 0xae, 0x51, 0x69, 0x9a, 0xa2, 0x21, 0x3d, 0x84, 0x82, 0x0a,
    0x84, 0xe4, 0x09, 0xad, 0x11, 0x24, 0x8b, 0x98, 0xc0, 0x81, 0x7f, 0x21, 0xa3, 0x52, 0xbe, 0x19,
    0x93, 0x09, 0xce, 0x20, 0x10, 0x46, 0x4a, 0x4a, 0xf8, 0x27, 0x31, 0xec, 0x58, 0xc7, 0xe8, 0x33,
    0x82, 0xe3, 0xce, 0xbf, 0x85, 0xf4, 0xdf, 0x94, 0xce, 0x4b, 0x09, 0xc1, 0x94, 0x56, 0x8a, 0xc0,
    0x13, 0x72, 0xa7, 0xfc, 0x9f, 0x84, 0x4d, 0x73, 0xa3, 0xca, 0x9a, 0x61, 0x58, 0x97, 0xa3, 0x27,
    0xfc, 0x03, 0x98, 0x76, 0x23, 0x1d, 0xc7, 0x61, 0x03, 0x04, 0xae, 0x56, 0xbf, 0x38, 0x84, 0x00,
    0x40, 0xa7, 0x0e, 0xfd, 0xff, 0x52, 0xfe, 0x03, 0x6f, 0x95, 0x30, 0xf1, 0x97, 0xfb, 0xc0, 0x85,
    0x60, 0xd6, 0x80, 0x25, 0xa9, 0x63, 0xbe, 0x03, 0x01, 0x4e, 0x38, 0xe2, 0xf9, 0xa2, 0x34, 0xff,
    0xbb, 0x3e, 0x03, 0x44, 0x78, 0x00, 0x90, 0xcb, 0x88, 0x11, 0x3a, 0x94, 0x65, 0xc0, 0x7c, 0x63,
    0x87, 0xf0, 0x3c, 0xaf, 0xd6, 0x25, 0xe4, 0x8b, 0x38, 0x0a, 0xac, 0x72, 0x21, 0xd4, 0xf8, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00,
    0x01, 0x00, 0x8f, 0xe2, 0x10, 0xff, 0x2f, 0xe1, 0x35, 0xa0, 0x03, 0x21, 0x09, 0x06, 0x89, 0x46,
    0x01, 0x25, 0xee, 0x07, 0xac, 0x02, 0xef, 0x03, 0x37, 0x43, 0x80, 0xb4, 0x01, 0x3c, 0xfc, 0xd1,
    0x01, 0x22, 0xcf, 0x07, 0xff, 0x0d, 0x17, 0x43, 0x00, 0xf0, 0x37, 0xf8, 0x52, 0x41, 0xff, 0x2a,
    0xf7, 0xd9, 0x0a, 0x70, 0x01, 0x31, 0x00, 0xf0, 0x2e, 0xf8, 0xf1, 0xd3, 0x00, 0x27, 0x01, 0x3f,
    0x00, 0xf0, 0x2b, 0xf8, 0x0c, 0xd3, 0x04, 0x22, 0x00, 0xf0, 0x12, 0xf8, 0x42, 0x46, 0x52, 0x42,
    0x8f, 0x5c, 0x0f, 0x70, 0x01, 0x31, 0x01, 0x3b, 0xfa, 0xd1, 0x00, 0xf0, 0x1c, 0xf8, 0xdf, 0xd3,
    0x03, 0x22, 0x00, 0xf0, 0x05, 0xf8, 0x02, 0x3b, 0x98, 0x46, 0xec, 0xd1, 0x48, 0x46, 0x00, 0x47,
    0x02, 0xb5, 0x12, 0x02, 0x00, 0x21, 0x02, 0x31, 0x17, 0x1c, 0x0f, 0x43, 0x00, 0xf0, 0x0d, 0xf8,
    0xf9, 0xd2, 0x01, 0x23, 0x01, 0x39, 0x17, 0x1c, 0x0f, 0x43, 0x00, 0xf0, 0x06, 0xf8, 0x5b, 0x41,
    0x02, 0x39, 0xf8, 0xd2, 0x02, 0xbd, 0xcf, 0x07, 0xff, 0x0d, 0x0e, 0xb5, 0x08, 0xe0, 0x76, 0x00,
    0x04, 0xd1, 0x06, 0x68, 0x04, 0x30, 0xb6, 0x19, 0x01, 0x22, 0x16, 0x43, 0x64, 0x41, 0x6d, 0x19,
    0x2a, 0x0c, 0xf4, 0xd3, 0xfa, 0x19, 0x6a, 0x44, 0x53, 0x8b, 0x19, 0x1c, 0x69, 0x43, 0x09, 0x0c,
    0x1f, 0x09, 0xdb, 0x1b, 0x64, 0x1a, 0x02, 0xd3, 0x6d, 0x1a, 0x00, 0x33, 0x03, 0xe0, 0x0d, 0x1c,
    0x02, 0x4f, 0xdb, 0x19, 0x64, 0x18, 0x53, 0x83, 0x0e, 0xbd, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00,
    0x9f, 0xd6, 0xff, 0xc7, 0xfd, 0xc6, 0x42, 0x43, 0x3c, 0xa0, 0xa8, 0xef, 0xb7, 0xef, 0xb7, 0xe1,
    0x54, 0x36, 0xd2, 0xed, 0x45, 0xbd, 0x12, 0x4b, 0x5b, 0x3b, 0x69, 0xca, 0x3e, 0xa0, 0x95, 0x8e,
    0x6d, 0xf3, 0xa8, 0x82, 0x3e, 0xdf, 0xb2, 0xb7, 0xab, 0x7a, 0xc4, 0xcf, 0x77, 0xf8, 0x28, 0x1a,
    0x72, 0x46, 0x73, 0x5a, 0xa1, 0x59, 0xc4, 0xa3, 0x43, 0xff, 0x95, 0x1e, 0x83, 0xb7, 0xc1, 0x56,
    0x4b, 0x3b, 0x6b, 0x09, 0x0b, 0x4c, 0x94, 0x64, 0x36, 0xb6, 0x68, 0xc2, 0x21, 0x68, 0x6f, 0x02,
    0xd3, 0x53, 0xf9, 0xe4, 0x7c, 0xa9, 0x12, 0x49, 0x0d, 0x4d, 0x4b, 0x19, 0x53, 0x75, 0x0e, 0x4b,
    0x4b, 0x8f, 0x39, 0x90, 0xf6, 0xc9, 0xbd, 0x5d, 0x3f, 0x7f, 0x5f, 0xf5, 0x1a, 0x8d, 0x0c, 0xda,
    0xce, 0x0a, 0x94, 0xb7, 0x30, 0xe4, 0xe0, 0x27, 0x49, 0x7e, 0x3b, 0x33, 0xa1, 0x0a, 0x1e, 0xb2,
    0x56, 0xc5, 0x04, 0x87, 0xa1, 0xe7, 0xcd, 0x28, 0x2f, 0x14, 0xd3, 0xed, 0xae, 0x29, 0x18, 0x49,
    0x52, 0xb0, 0x80, 0x2d, 0x13, 0x1f, 0x61, 0x95, 0x96, 0xd1, 0x40, 0x9c, 0xb5, 0x38, 0x43, 0xa2,
    0xc8, 0x2c, 0x98, 0x73, 0xf5, 0x75, 0x1e, 0x22, 0xc3, 0xe4, 0xdb, 0x26, 0xf6, 0xba, 0x49, 0x6f,
    0x0a, 0x55, 0x35, 0x49, 0xeb, 0xfd, 0x26, 0x3c, 0x35, 0x74, 0xe7, 0xbe, 0xa8, 0x83, 0x09, 0xe2,
    0xa5, 0x06, 0x6f, 0xce, 0xf4, 0xd6, 0x6d, 0xa6, 0x83, 0x2e, 0x33, 0x94, 0xdf, 0x40, 0xa6, 0x7a,
    0xe6, 0xc5, 0xc9, 0xc9, 0xff, 0x0a, 0xc1, 0xd4, 0xb6, 0x5e, 0x89, 0xb7, 0x98, 0xb6, 0xdd, 0x04,
    0x2b, 0xcd, 0x8d, 0xb5, 0x4c, 0x19, 0xa3, 0x04, 0x05, 0x3e, 0x0f, 0x58, 0xa5, 0xd3, 0xb5, 0x8c,
    0x22, 0x7f, 0x90, 0x58, 0x7e, 0xc3, 0xbb, 0x4d, 0xf0, 0x69, 0xf6, 0xdb, 0xbe, 0x25, 0x9d, 0x4e,
    0x3a, 0x42, 0x31, 0x88, 0x70, 0x32, 0x79, 0x4d, 0x09, 0xf0, 0x04, 0x0f, 0x4e, 0x24, 0xc1, 0x8d,
    0x15, 0x3b, 0xd2, 0xa8, 0xd5, 0x18, 0xbd, 0x9b, 0xca, 0xf9, 0xe6, 0x3c, 0xe8, 0xf5, 0xd8, 0x5b,
    0x61, 0xf3, 0xd0, 0x34, 0xbf, 0x6c, 0xdc, 0xf5, 0x8d, 0x98, 0x3a, 0x5e, 0x6c, 0xae, 0x2f, 0x21,
    0x7e, 0xe1, 0x17, 0xa6, 0x98, 0x32, 0x29, 0xc7, 0xf6, 0x53, 0xdd, 0x62, 0xbe, 0x56, 0xac, 0x31,
    0x1c, 0x70, 0xd0, 0x54, 0x4b, 0xb3, 0x9b, 0xb0, 0x7f, 0x16, 0xa4, 0xba, 0xac, 0x0d, 0x8f, 0x65,
    0xec, 0x08, 0x98, 0x72, 0xc2, 0x22, 0x96, 0x28, 0x31, 0xea, 0xdf, 0x2d, 0x53, 0x8e, 0xdb, 0xff,
    0xc7, 0x35, 0xff, 0xa4, 0x38, 0xde, 0x5f, 0x1c, 0x0e, 0x65, 0xa1, 0xd5, 0x8e, 0xa6, 0x21, 0x0e,
    0x05, 0x44, 0xb8, 0x65, 0x75, 0x68, 0xa0, 0x4a, 0x6e, 0x45, 0xd6, 0xfe, 0xe7, 0xcc, 0xf6, 0xc6,
    0x8b, 0x55, 0x40, 0xd2, 0x9a, 0x2c, 0x18, 0x60, 0x2f, 0xe4, 0x26, 0xae, 0xda, 0x7a, 0xa8, 0x36,
    0x8e, 0x85, 0xe1, 0xd4, 0x48, 0x95, 0x43, 0x55, 0x7d, 0xf4, 0xa2, 0xe7, 0xf9, 0x06, 0x0f, 0x6a,
    0x65, 0xee, 0xef, 0xcc, 0x51, 0xeb, 0x63, 0xb9, 0x0d, 0xdf, 0x8b, 0x73, 0xb8, 0x6b, 0x41, 0xa2,
    0xf7, 0x45, 0xf5, 0xe4, 0x81, 0xb2, 0xcc, 0x12, 0x13, 0x3b, 0x84, 0xc4, 0x52, 0x1a, 0x41, 0x3c,
    0xcb, 0x20, 0x6b, 0x43, 0x84, 0x66, 0xe4, 0x1a, 0xec, 0x5a, 0x08, 0x4a, 0x96, 0x57, 0x7c, 0x80,
    0x1c, 0xa9, 0xe5, 0x18, 0x35, 0x3e, 0x3b, 0x61, 0x43, 0xe5, 0x4d, 0x13, 0x4f, 0x44, 0xda, 0x2a,
    0x36, 0x33, 0xb3, 0x4c, 0x2b, 0xec, 0x4e, 0x9c, 0xa9, 0xf1, 0xe6, 0xb9, 0x43, 0x3a, 0x6e, 0xfc,
    0x6f, 0x48, 0xc7, 0xb1, 0x06, 0x56, 0x44, 0x65, 0x70, 0x76, 0x7d, 0xa1, 0xa9, 0xc3, 0x5e, 0x68,
    0xf4, 0xcc, 0x49, 0x07, 0x48, 0x8e, 0xd0, 0xa2, 0xd2, 0xde, 0xb1, 0x5a, 0xc4, 0x24, 0x68, 0x92,
    0x27, 0xd2, 0x49, 0xd8, 0xc3, 0x5d, 0xae, 0x92, 0x11, 0x49, 0x99, 0x71, 0x57, 0x87, 0x2e, 0x1f,
    0x00, 0x4b, 0x27, 0x63, 0x4f, 0xb1, 0x1e, 0x2c, 0xf6, 0x8c, 0x53, 0x91, 0x9d, 0x39, 0xbe, 0x5a,
    0xeb, 0xf4, 0x1e, 0xb4, 0x56, 0x45, 0x2f, 0xf7, 0x90, 0xb4, 0xa4, 0x51, 0xb8, 0xb5, 0x4b, 0x88,
    0x2d, 0xd3, 0x16, 0xee, 0x37, 0x0a, 0x96, 0x54, 0x96, 0x7d, 0xdc, 0x6e, 0x00, 0xd8, 0xfd, 0x7d,
    0xdb, 0x1a, 0x3c, 0xe2, 0xb3, 0xef, 0xe3, 0xa8, 0xe8, 0x33, 0xab, 0x19, 0xaf, 0xd2, 0x83, 0x64,
    0x02, 0x5f, 0x02, 0x01, 0x71, 0x8f, 0x66, 0xa9, 0xc9, 0x79, 0x13, 0xb0, 0xff, 0x9e, 0x92, 0x83,
    0xc6, 0x43, 0x75, 0x7a, 0x5c, 0xcd, 0x38, 0x68, 0xb2, 0x3d, 0x9a, 0xa1, 0xc1, 0xed, 0x29, 0xf5,
    0xfc, 0x60, 0x60, 0x96, 0xef, 0x76, 0x91, 0xee, 0xab, 0x75, 0x2f, 0xe1, 0x89, 0xfc, 0x02, 0xec,
    0x70, 0xee, 0xe6, 0x3c, 0x9f, 0xd1, 0x0e, 0x7b, 0xe1, 0x6c, 0x46, 0xe2, 0x48, 0xaf, 0x83, 0x33,
    0x65, 0x0a, 0x0f, 0x68, 0xc1, 0x8b, 0xa7, 0x12, 0xd3, 0xeb, 0x68, 0x68, 0xdd, 0x69, 0x6f, 0x10,
    0xc1, 0x57, 0xb6, 0x76, 0x27, 0xb9, 0xf4, 0x7e, 0x51, 0x66, 0x5a, 0x6f, 0x90, 0xd1, 0xd5, 0xaf,
    0x4d, 0xbd, 0xe0, 0x6b, 0x01, 0x65, 0xb8, 0x18, 0xc2, 0x66, 0xd3, 0x38, 0xc1, 0x3e, 0x47, 0x8d,
    0x2c, 0xe2, 0xfd, 0x7c, 0x57, 0x20, 0x67, 0x54, 0x67, 0xc2, 0x44, 0x98, 0xd2, 0x30, 0x46, 0xca,
    0x62, 0xc4, 0xa9, 0xf9, 0x4c, 0x41, 0x64, 0xd7, 0x9d, 0x25, 0x57, 0xf6, 0x27, 0x37, 0x70, 0xd0,
    0x64, 0xed, 0x47, 0x19, 0xd3, 0x82, 0x62, 0x60, 0x21, 0xa0, 0x63, 0x8a, 0x6d, 0x44, 0x83, 0xdb,
    0x0f, 0x4d, 0x2d, 0x81, 0xb1, 0x49, 0xbb, 0xe5, 0xef, 0x38, 0x9e, 0x40, 0x23, 0xe5, 0x37, 0x48,
    0x98, 0x56, 0x54, 0x46, 0xb9, 0x9c, 0x1b, 0x79, 0x22, 0xf2, 0x9f, 0xb5, 0x4c, 0xb8, 0x5b, 0xe0,
    0xb2, 0xc2, 0xf9, 0x66, 0xe0, 0xd6, 0x5c, 0xbd, 0xad, 0xeb, 0xa9, 0x38, 0xde, 0x9b, 0x4e, 0x0d,
    0xaf, 0xed, 0x7b, 0xb0, 0x6c, 0xe2, 0xb2, 0x49, 0x45, 0xcf, 0x12, 0xf6, 0xde, 0x74, 0x95, 0x7a,
    0xd8, 0xa4, 0xad, 0xb5, 0xfa, 0x79, 0x62, 0xb7, 0x29, 0x9c, 0x05, 0x98, 0xf9, 0xc4, 0x14, 0xe7,
    0xab, 0x40, 0x46, 0x1f, 0x86, 0x9b, 0xe2, 0xa0, 0x20, 0x6e, 0x82, 0x55, 0xf2, 0x53, 0x5b, 0x67,
    0xfc, 0x57, 0x23, 0x58, 0x1f, 0x3f, 0x78, 0xf0, 0xfe, 0x29, 0x60, 0x98, 0xbd, 0xa6, 0x27, 0x67,
    0x92, 0x1e, 0x5c, 0x62, 0x48, 0x8d, 0xbb, 0x3a, 0xad, 0x73, 0xf9, 0x5c, 0x3c, 0x32, 0xec, 0x81,
    0xea, 0x52, 0x60, 0x28, 0xf4, 0xee, 0x85, 0xf7, 0xcf, 0xcf, 0x7a, 0xf9, 0x52, 0xeb, 0xda, 0xe6,
    0x09, 0x96, 0x1a, 0xff, 0x13, 0x3a, 0x6d, 0xef, 0x02, 0x10, 0x79, 0x45, 0xdf, 0x4f, 0xc6, 0x7f,
    0x62, 0xa7, 0xff, 0x7e, 0x79, 0x4e, 0x96, 0xbf, 0xbb, 0x49, 0x32, 0xd3, 0x19, 0x0d, 0xa1, 0xa5,
    0x11, 0x30, 0x81, 0xb0, 0xfe, 0x5a, 0x23, 0xd2, 0x17, 0x4b, 0x09, 0x56, 0x35, 0x21, 0x34, 0xec,
    0xa0, 0x4b, 0x53, 0x55, 0x10, 0xba, 0x16, 0x9e, 0x69, 0x27, 0xea, 0x42, 0xeb, 0x2e, 0xe1, 0x56,
    0xd1, 0x84, 0x7e, 0x56, 0xc9, 0xf1, 0x22, 0xf3, 0x6a, 0x5d, 0xbe, 0x9d, 0x85, 0x22, 0xcc, 0xe5,
    0x06, 0xac, 0x01, 0x7d, 0x4e, 0x3d, 0x61, 0x82, 0xe2, 0xae, 0x80, 0x41, 0xba, 0xb7, 0x63, 0xb6,
    0x4d, 0x04, 0x87, 0x30, 0x83, 0x00, 0x17, 0x1f, 0x2f, 0xb9, 0x97, 0x3b, 0xc1, 0x37, 0x59, 0xe2,
    0x11, 0xa2, 0x15, 0x6f, 0xec, 0xbb, 0xa6, 0x51, 0x10, 0x5e, 0xd4, 0x01, 0x23, 0x2b, 0xfa, 0xae,
    0xf8, 0xcd, 0x8d, 0xdc, 0x1b, 0xac, 0x9f, 0x9c, 0xae, 0x88, 0x3c, 0x54, 0x7c, 0x84, 0xf7, 0xe3,
    0x49, 0x92, 0x84, 0x2f, 0xd3, 0x62, 0x98, 0x7b, 0xc5, 0x64, 0xfa, 0x0b, 0xbe, 0x8f, 0x16, 0x8c,
    0xab, 0x1f, 0xcc, 0x21, 0xfc, 0x68, 0x82, 0x01, 0xd1, 0x71, 0x69, 0xba, 0xc5, 0xa0, 0xac, 0xad,
    0xe6, 0x1a, 0x08, 0xb8, 0x9a, 0x48, 0xb8, 0xef, 0x83, 0xd1, 0x2a, 0x9a, 0x37, 0x42, 0xd2, 0x14,
    0x37, 0x25, 0x39, 0x4d, 0x39, 0x3e, 0xbd, 0xb0, 0x53, 0xa2, 0x58, 0x71, 0x4c, 0xef, 0xcb, 0xf5,
    0x94, 0x1a, 0x0b, 0x42, 0x7a, 0x25, 0xee, 0x4a, 0x68, 0xf9, 0x50, 0xe1, 0xb9, 0xef, 0x2a, 0xe1,
    0xf1, 0x9d, 0x3a, 0x76, 0xbe, 0xfe, 0x66, 0x4c, 0x96, 0xed, 0xcb, 0x55, 0x3d, 0x01, 0x71, 0x96,
    0xf1, 0x71, 0xaf, 0xe9, 0xc1, 0xed, 0x72, 0x1c, 0x81, 0x6c, 0x2f, 0x84, 0xbf, 0x42, 0x06, 0x20,
    0x01, 0xbb, 0x8a, 0xb5, 0xe0, 0x15, 0x36, 0x7d, 0x4c, 0xe2, 0x45, 0x85, 0xbf, 0xfc, 0xf3, 0x7c,
    0x3b, 0xdd, 0x14, 0xd9, 0x5a, 0x2b, 0x68, 0x5f, 0xb0, 0xce, 0xcf, 0x6b, 0x1f, 0x35, 0xe4, 0x60,
    0x78, 0xdb, 0x1d, 0x77, 0xe6, 0x47, 0x68, 0xff, 0x9a, 0x57, 0x28, 0x5f, 0x4f, 0xe5, 0x0e, 0x88,
    0x7d, 0x4d, 0xd6, 0x27, 0xcf, 0x96, 0xd5, 0xa1, 0x17, 0x6a, 0x2c, 0x9c, 0xf1, 0xc0, 0xc2, 0x65,
    0x4b, 0x07, 0x66, 0x1a, 0xad, 0x92, 0xdd, 0xbd, 0xa6, 0x1c, 0x67, 0x0a, 0x0a, 0x30, 0x7d, 0xd7,
    0x5d, 0x64, 0xb7, 0x18, 0xb7, 0x19, 0x59, 0x0b, 0x36, 0xa4, 0xba, 0x06, 0xff, 0x54, 0x5a, 0xe4,
    0x58, 0x47, 0x69, 0xd0, 0xfb, 0x5c, 0xb5, 0x11, 0x3f, 0xba, 0xc3, 0x2a, 0xa9, 0xd5, 0x32, 0x16,
    0x47, 0x22, 0x5e, 0x76, 0x42, 0xc6, 0xd4, 0x3c, 0xd2, 0xf7, 0x08, 0xa0, 0x04, 0x3a, 0xf8, 0x77,
    0x6d, 0xc6, 0xda, 0x6f, 0xb2, 0xff, 0x87, 0x18, 0xc6, 0x55, 0x5d, 0xd1, 0x33, 0x5b, 0x5e, 0xe8,
    0x65, 0x6a, 0x1d, 0x9e, 0xb4, 0x3e, 0x02, 0x76, 0x84, 0x55, 0xf0, 0x6c, 0xc5, 0x13, 0x43, 0xae,
    0xe7, 0xd9, 0xcf, 0x07, 0xe1, 0x59, 0x84, 0x56, 0x6b, 0x39, 0xad, 0xb3, 0x0b, 0x76, 0xda, 0x46,
    0x33, 0xc3, 0x13, 0x23, 0xf0, 0x31, 0x28, 0x0a, 0x41, 0x11, 0x3b, 0x2e, 0x5e, 0x13, 0x42, 0x71,
    0xad, 0x05, 0x8a, 0x66, 0x41, 0xe3, 0xe7, 0x49, 0x21, 0xb0, 0x85, 0x57, 0xf2, 0xbc, 0xfc, 0x3d,
    0x4a, 0xd7, 0xf8, 0xc6, 0x00, 0x88, 0xfc, 0x9d, 0xb4, 0xed, 0xaf, 0x1d, 0x85, 0x38, 0x23, 0xb5,
    0xcf, 0xa2, 0x51, 0x95, 0xc0, 0x37, 0x86, 0xa1, 0x80, 0xe7, 0x3b, 0x80, 0x7a, 0xc5, 0x69, 0x17,
    0x7f, 0xcd, 0x51, 0xf3, 0x74, 0xd1, 0x3a, 0xd9, 0xe3, 0x2b, 0x70, 0x5d, 0x07, 0xc0, 0x1e, 0x0c,
    0xe4, 0xca, 0xa6, 0xb4, 0xa4, 0x87, 0xf7, 0xac, 0xc5, 0x0d, 0xdf, 0x0d, 0x8b, 0x6c, 0x2e, 0xcc,
    0xf3, 0xd6, 0xac, 0xbd, 0xe9, 0x8c, 0xf3, 0xe3, 0xa5, 0xf7, 0x52, 0x5d, 0xb0, 0xb1, 0xab, 0xd9,
    0xef, 0x28, 0x92, 0x0d, 0x2f, 0xed, 0x38, 0x83, 0x64, 0x02, 0xdd, 0x84, 0x68, 0xef, 0x3e, 0x9c,
    0x01, 0x9c, 0x16, 0xa2, 0xc2, 0x67, 0xe1, 0x02, 0x7c, 0x3b, 0x22, 0x26, 0x97, 0xff, 0x32, 0x87,
    0x49, 0xa4, 0xca, 0x58, 0xfb, 0xca, 0x02, 0x97, 0x10, 0x3f, 0x03, 0xc3, 0x46, 0x1e, 0xa1, 0x5e,
    0x20, 0x49, 0x71, 0xca, 0x21, 0x9e, 0x2c, 0x65, 0xb8, 0x06, 0x91, 0x20, 0xea, 0x2d, 0x76, 0x2c,
    0x17, 0x91, 0xcc, 0x58, 0x5f, 0x05, 0xd4, 0x44, 0xed, 0x80, 0xce, 0x5c, 0xd1, 0xd7, 0x7c, 0x94,
    0x79, 0xd5, 0x13, 0xfd, 0x83, 0xd4, 0x62, 0x59, 0xa6, 0x8b, 0x77, 0x34, 0x2a, 0x5f, 0xba, 0xc5,
    0x95, 0xff, 0x31, 0x62, 0xf5, 0x6d, 0x25, 0x48, 0x60, 0xef, 0x3e, 0x1e, 0x75, 0x26, 0x11, 0x38,
    0xb7, 0x3b, 0x87, 0x7f, 0xd2, 0xb5, 0xba, 0xe6, 0x1e, 0x3d, 0x55, 0x26, 0x74, 0x65, 0x19, 0xd0,
    0xb4, 0x67, 0x06, 0x4f, 0x38, 0x42, 0x39, 0xfe, 0x82, 0x3d, 0xc6, 0x84, 0xeb, 0x38, 0x11, 0xe0,
    0x4e, 0x37, 0xc4, 0xbe, 0x08, 0x19, 0xd4, 0xfe, 0xb2, 0x3a, 0x78, 0xd2, 0x2c, 0x72, 0x9d, 0x0f,
    0x80, 0x61, 0x35, 0xce, 0xd7, 0x27, 0x64, 0x30, 0x59, 0x12, 0x73, 0x05, 0xab, 0xa7, 0xc9, 0x2e,
    0x38, 0x4a, 0x03, 0x79, 0x1e, 0x6f, 0xab, 0x20, 0x86, 0x98, 0x02, 0x1b, 0x96, 0x46, 0x3f, 0x5d,
    0xc7, 0x87, 0xea, 0xdd, 0x1f, 0x7d, 0x4c, 0xe8, 0xef, 0x3f, 0xc5, 0xca, 0x3c, 0xa2, 0xb6, 0xbb,
    0x7d, 0xf3, 0xfd, 0xf5, 0xb5, 0x52, 0xda, 0x2d, 0x34, 0x3c, 0x7b, 0x60, 0xf3, 0x8c, 0x56, 0xcb,
    0xc8, 0x8d, 0x02, 0xe8, 0xfb, 0xb0, 0x51, 0x75, 0x2e, 0x75, 0x22, 0xdf, 0x0e, 0xa5, 0x16, 0xc6,
    0xf6, 0x67, 0xe3, 0xdb, 0xa8, 0xd0, 0x90, 0xe4, 0x70, 0xbd, 0xa6, 0x5f, 0xff, 0x14, 0xb5, 0x15,
    0xad, 0xf5, 0xbd, 0x70, 0xa2, 0x31, 0xd9, 0x42, 0x21, 0x39, 0x36, 0xca, 0x4d, 0xc7, 0x69, 0x87,
    0xf6, 0x73, 0x1b, 0xdc, 0x55, 0x41, 0xfc, 0xd7, 0xb4, 0xb3, 0x92, 0xde, 0x0e, 0x31, 0x2f, 0x23,
    0xfe, 0xe5, 0x12, 0xb9, 0x6d, 0x15, 0xa1, 0x88, 0xe3, 0x55, 0x24, 0x30, 0xf5, 0xb9, 0x2f, 0x2a,
    0xf3, 0x54, 0xe3, 0x3b, 0x31, 0xcd, 0x06, 0x10, 0x74, 0xf8, 0x74, 0x84, 0xa6, 0x20, 0xae, 0xe8,
    0xf7, 0x4a, 0x21, 0xc7, 0xd2, 0xcb, 0x15, 0xb8, 0xa1, 0xb4, 0x88, 0x22, 0x01, 0x97, 0x98, 0xea,
    0x84, 0xd8, 0xc3, 0x5c, 0x9a, 0x7c, 0xd4, 0x26, 0x97, 0x55, 0x27, 0x44, 0x50, 0x1d, 0x9d, 0x14,
    0x49, 0x64, 0xc1, 0xb2, 0xd7, 0x16, 0xaf, 0xd3, 0xb2, 0x73, 0x37, 0x23, 0x70, 0x3b, 0xbe, 0x74,
    0x53, 0x89, 0x1f, 0xf8, 0x86, 0x6b, 0x41, 0x65, 0x61, 0xe7, 0xe3, 0x7c, 0x1a, 0xb0, 0xe0, 0x92,
    0x7e, 0x94, 0xec, 0x10, 0x7e, 0x80, 0xb8, 0x68, 0xe3, 0xdf, 0xbc, 0x72, 0x55, 0xf6, 0x1c, 0x83,
    0x1a, 0xb2, 0x33, 0x8d, 0xf3, 0xe7, 0xf4, 0x6a, 0xe8, 0x2c, 0x38, 0x21, 0x9c, 0x03, 0xec, 0x17,
    0x5a, 0x90, 0xb7, 0xfb, 0x23, 0x72, 0x87, 0x7f, 0xba, 0x8b, 0x64, 0x1e, 0xb6, 0x3d, 0xb8, 0xeb,
    0xc4, 0x1d, 0x99, 0xb5, 0x7d, 0x8a, 0x88, 0xbb, 0x7f, 0x52, 0xec, 0xf2, 0x54, 0x9e, 0x58, 0x33,
    0xba, 0xc2, 0x51, 0x7d, 0xb7, 0xd5, 0xff, 0x10, 0x9c, 0xb5, 0x79, 0xa3, 0x1f, 0x2c, 0x35, 0xd4,
    0xc8, 0x67, 0x14, 0x66, 0xe9, 0x12, 0x3a, 0x65, 0xc0, 0xc7, 0x1b, 0xca, 0xb3, 0x49, 0x11, 0x7e,
    0x77, 0xf1, 0xb7, 0x4e, 0xa1, 0xc7, 0xf1, 0x6e, 0xb7, 0xd7, 0x83, 0xed, 0x4c, 0xf4, 0xef, 0xb0,
    0x68, 0x2e, 0x6d, 0x47, 0x6b, 0xdb, 0xa5, 0x72, 0xb8, 0x87, 0x2c, 0x30, 0x77, 0xbe, 0xd1, 0xc5,
    0xa3, 0x70, 0x03, 0x81, 0x47, 0xb4, 0x28, 0x03, 0x4e, 0x73, 0x7a, 0x32, 0x42, 0x69, 0x79, 0x97,
    0x56, 0xa2, 0xf8, 0xd7, 0x4c, 0xe3, 0x6b, 0x75, 0xc4, 0x76, 0x09, 0xf5, 0xa9, 0x5f, 0xaa, 0xd9,
    0xd7, 0x27, 0x05, 0xf8, 0x80, 0x27, 0xbe, 0x66, 0x1f, 0x21, 0xed, 0xea, 0x0b, 0xfe, 0xa9, 0x71,
    0x7f, 0xd1, 0x9c, 0xd9, 0x53, 0x91, 0x60, 0xd1, 0xcf, 0x16, 0x85, 0x27, 0x02, 0x7b, 0x32, 0x5d,
    0x57, 0x8d, 0x50, 0xbb, 0x5e, 0xc9, 0xfe, 0x9e, 0x88, 0xd0, 0xfa, 0x8e, 0x70, 0x6d, 0x33, 0x10,
    0xa7, 0x6c, 0x81, 0x62, 0x03, 0x88, 0x6e, 0xfc, 0x0d, 0x1c, 0x54, 0x4b, 0x5a, 0x2b, 0xf4, 0xba,
    0x06, 0x61, 0xb4, 0x1e, 0xda, 0x65, 0x7f, 0xa8, 0xdb, 0x31, 0x96, 0x70, 0xb0, 0xe1, 0xf5, 0x34,
    0x54, 0x61, 0x09, 0x46, 0xdf, 0xd8, 0x16, 0x3f, 0x4a, 0x99, 0x98, 0xd3, 0xfb, 0xd4, 0x8f, 0x46,
    0xdb, 0xc7, 0x01, 0xd3, 0x34, 0xd1, 0xa4, 0xde, 0x7d, 0x08, 0xfb, 0xac, 0x07, 0xbe, 0xe0, 0xf6,
    0x98, 0xaf, 0x7d, 0x49, 0x4e, 0xa7, 0x4b, 0x9f, 0x52, 0x3c, 0xa2, 0x5c, 0x60, 0x8d, 0x3f, 0x4a,
    0x9f, 0xfa, 0x74, 0x2b, 0x88, 0xf2, 0xde, 0x63, 0x3d, 0xd4, 0x26, 0x56, 0xa2, 0x9b, 0x83, 0xfa,
    0x9b, 0x13, 0x16, 0xa6, 0xb8, 0x58, 0x8d, 0x2d, 0xe8, 0x59, 0x6f, 0x6c, 0x89, 0xc1, 0x09, 0x61,
    0xa6, 0x33, 0x3f, 0xe3, 0x07, 0x57, 0xc8, 0xd3, 0x1b, 0xc6, 0x73, 0x64, 0xb1, 0x9b, 0x9c, 0x4b,
    0x54, 0x45, 0x0b, 0x8e, 0x6d, 0xf3, 0xcf, 0x72, 0x58, 0xa6, 0x21, 0xcc, 0xa0, 0xc2, 0xa0, 0xa1,
    0x92, 0x96, 0x5a, 0x18, 0x2a, 0x22, 0x52, 0x47, 0x9d, 0xb3, 0xd7, 0x79, 0xe9, 0xa0, 0x94, 0x0c,
    0x6f, 0x2c, 0x88, 0x27, 0xf6, 0x86, 0x81, 0x2c, 0x83, 0x44, 0x98, 0xc6, 0x54, 0xee, 0xe7, 0x5b,
    0x72, 0x6e, 0xae, 0x9c, 0xa1, 0x46, 0x24, 0x6d, 0x17, 0x5e, 0x12, 0x3b, 0xef, 0xbb, 0x12, 0x3c,
    0xcf, 0x6c, 0x61, 0xcf, 0x5f, 0x04, 0xf3, 0x39, 0xb5, 0xe9, 0x8e, 0xb0, 0xb0, 0x97, 0xd6, 0x0b,
    0x56, 0x32, 0x99, 0x89, 0xc4, 0x00, 0x45, 0xfd, 0x3f, 0x64, 0x6d, 0x71, 0x1e, 0x29, 0x4e, 0x76,
    0x02, 0x98, 0x2f, 0x99, 0x0b, 0x3c, 0x17, 0xb8, 0x03, 0x68, 0xe7, 0x4d, 0xfa, 0xf1, 0x09, 0x07,
    0xf2, 0x95, 0x48, 0x58, 0x3a, 0xf4, 0x99, 0x87, 0x40, 0x8d, 0x1d, 0xba, 0x6a, 0xfd, 0xb7, 0xfa,
    0xea, 0x78, 0x51, 0x69, 0xb0, 0x99, 0x93, 0x20, 0xd9, 0xd3, 0x2b, 0xe9, 0x13, 0x3f, 0x33, 0x87,
    0x85, 0x66, 0xec, 0xcb, 0x19, 0x68, 0x97, 0xa7, 0x95, 0xdf, 0xf5, 0x79, 0x40, 0xf8, 0xac, 0xfa,
    0xdb, 0x58, 0xc5, 0x0c, 0xf3, 0x54, 0x81, 0xa0, 0x57, 0xca, 0x10, 0x0b, 0xa4, 0xb9, 0xa7, 0x97,
    0x31, 0x1f, 0x1a, 0xcd, 0x6d, 0xe4, 0x93, 0xc3, 0x2d, 0x70, 0x21, 0x0e, 0x9f, 0x27, 0x64, 0xdb,
    0x60, 0x0e, 0x69, 0xc2, 0x58, 0xcc, 0xf9, 0x81, 0x4b, 0xd1, 0xf1, 0x68, 0x4e, 0x10, 0xd1, 0x4a,
    0x55, 0x39, 0xde, 0x05, 0xdd, 0xef, 0xe3, 0x26, 0xdd, 0xbe, 0x83, 0xb8, 0x74, 0x65, 0xee, 0x88,
    0xb5, 0xa2, 0x41, 0xf8, 0x6c, 0x08, 0xc9, 0x5f, 0xcb, 0x1b, 0x67, 0x00, 0x60, 0x89, 0x32, 0x47,
    0xb5, 0x79, 0x6c, 0xf3, 0x27, 0x74, 0xf2, 0x6f, 0xd2, 0x76, 0xd8, 0x47, 0x9c, 0xef, 0x6c, 0x08,
    0x40, 0x1c, 0x98, 0xb8, 0xd8, 0xac, 0x39, 0x51, 0xe8, 0x26, 0x9d, 0x5a, 0xcc, 0xc9, 0x6f, 0xa7,
    0xc3, 0xfd, 0x2c, 0x8a, 0x4b, 0x71, 0x7c, 0x65, 0xe3, 0x26, 0xc8, 0x08, 0xb7, 0xac, 0xd5, 0x55,
    0x58, 0x33, 0xfe, 0x9c, 0xdd, 0x68, 0x32, 0xa2, 0x85, 0x43, 0xbd, 0xde, 0x7e, 0xdd, 0x29, 0xbc,
    0x9e, 0x55, 0x92, 0x86, 0xbc, 0x6e, 0xcd, 0xcc, 0x15, 0x56, 0xb0, 0x85, 0x71, 0xfa, 0x2d, 0x7e,
    0x52, 0xe1, 0xfa, 0xeb, 0x6b, 0xab, 0x9d, 0x46, 0x14, 0xb4, 0x35, 0x69, 0x11, 0x9b, 0x54, 0x00,
    0x9b, 0xb9, 0xdd, 0x29, 0x22, 0xc0, 0xe1, 0xdc, 0x6c, 0x1c, 0x33, 0xd3, 0x01, 0xd5, 0xe6, 0xd6,
    0x9d, 0x62, 0x49, 0xaa, 0x60, 0x7e, 0x68, 0x97, 0xcb, 0xdd, 0xca, 0x49, 0x0a, 0xaf, 0x97, 0xa1,
    0xae, 0x04, 0xb3, 0x75, 0x90, 0x52, 0xd1, 0xab, 0x64, 0x3c, 0x70, 0x1f, 0x27, 0x9c, 0xcf, 0x2c,
    0x09, 0xb9, 0xc3, 0xc5, 0x92, 0xf1, 0x3c, 0xc0, 0xa8, 0x73, 0x7f, 0xa6, 0xc9, 0x1f, 0xcc, 0x59,
    0x3a, 0x82, 0xff, 0x2d, 0x58, 0x70, 0x5c, 0x40, 0x00, 0xed, 0x11, 0xc4, 0x15, 0x2b, 0x06, 0x4c,
    0xb5, 0xdc, 0xcd, 0x57, 0x1f, 0x3d, 0xbe, 0xa0, 0x51, 0xc4, 0xe2, 0x53, 0x92, 0x20, 0x31, 0xdf,
    0x73, 0x2c, 0x89, 0xed, 0xef, 0xc4, 0x9d, 0xb3, 0xc8, 0xc2, 0xb6, 0x17, 0x1a, 0x11, 0x1c, 0xc0,
    0x46, 0x50, 0xcb, 0x7c, 0xd4, 0xe1, 0x7c, 0xa5, 0x05, 0x18, 0xed, 0xf9, 0xc5, 0x31, 0x66, 0x6d,
    0xf6, 0x60, 0xf3, 0x8e, 0xfb, 0xa5, 0x7a, 0xed, 0x8c, 0x27, 0x11, 0x44, 0x42, 0x01, 0x6b, 0x5b,
    0xc2, 0x26, 0x3d, 0xbb, 0x70, 0xad, 0xd9, 0xff, 0x94, 0xc3, 0xc5, 0x2e, 0xf5, 0x9a, 0x48, 0x71,
    0x85, 0x67, 0x37, 0x47, 0xfd, 0x6c, 0x89, 0x2b, 0x07, 0x42, 0xa8, 0xe2, 0x3e, 0xe8, 0x1b, 0xf5,
    0xbd, 0x5a, 0xdb, 0x97, 0xf0, 0x36, 0xab, 0x83, 0x83, 0x1c, 0xaf, 0x82, 0xfb, 0x13, 0x61, 0x7b,
    0xa2, 0xb1, 0x6b, 0x41, 0x00, 0x00, 0xf4, 0x1a
};

BOOST_AUTO_TEST_CASE(shrinkler_depacker_test)
{
    divided_thumb_assembler a;

    ////////////////////////////////////////////////////////////////////////////
    // Cartridge header
    ////////////////////////////////////////////////////////////////////////////

    a.arm_branch("code_start"s);
    // Logo
    a.byte(0x24, 0xff, 0xae, 0x51, 0x69, 0x9a, 0xa2, 0x21);
    a.byte(0x3d, 0x84, 0x82, 0x0a, 0x84, 0xe4, 0x09, 0xad);
    a.byte(0x11, 0x24, 0x8b, 0x98, 0xc0, 0x81, 0x7f, 0x21);
    a.byte(0xa3, 0x52, 0xbe, 0x19, 0x93, 0x09, 0xce, 0x20);
    a.byte(0x10, 0x46, 0x4a, 0x4a, 0xf8, 0x27, 0x31, 0xec);
    a.byte(0x58, 0xc7, 0xe8, 0x33, 0x82, 0xe3, 0xce, 0xbf);
    a.byte(0x85, 0xf4, 0xdf, 0x94, 0xce, 0x4b, 0x09, 0xc1);
    a.byte(0x94, 0x56, 0x8a, 0xc0, 0x13, 0x72, 0xa7, 0xfc);
    a.byte(0x9f, 0x84, 0x4d, 0x73, 0xa3, 0xca, 0x9a, 0x61);
    a.byte(0x58, 0x97, 0xa3, 0x27, 0xfc, 0x03, 0x98, 0x76);
    a.byte(0x23, 0x1d, 0xc7, 0x61, 0x03, 0x04, 0xae, 0x56);
    a.byte(0xbf, 0x38, 0x84, 0x00, 0x40, 0xa7, 0x0e, 0xfd);
    a.byte(0xff, 0x52, 0xfe, 0x03, 0x6f, 0x95, 0x30, 0xf1);
    a.byte(0x97, 0xfb, 0xc0, 0x85, 0x60, 0xd6, 0x80, 0x25);
    a.byte(0xa9, 0x63, 0xbe, 0x03, 0x01, 0x4e, 0x38, 0xe2);
    a.byte(0xf9, 0xa2, 0x34, 0xff, 0xbb, 0x3e, 0x03, 0x44);
    a.byte(0x78, 0x00, 0x90, 0xcb, 0x88, 0x11, 0x3a, 0x94);
    a.byte(0x65, 0xc0, 0x7c, 0x63, 0x87, 0xf0, 0x3c, 0xaf);
    a.byte(0xd6, 0x25, 0xe4, 0x8b, 0x38, 0x0a, 0xac, 0x72);
    a.byte(0x21, 0xd4, 0xf8, 0x07);
    // Game title
    a.byte(0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
    a.byte(0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
    // Game code
    a.byte(0x00, 0x00, 0x00, 0x00);
    // Maker code
    a.byte(0x00, 0x00);
    // Fixed
    a.byte(0x96);
    // Unit code
    a.byte(0x00);
    // Device type
    a.byte(0x00);
    // Unused
    a.byte(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
    // Game version
    a.byte(0x00);
    // Complement
    // For testing we assemble the correct complement.
    // Normally we'd fix this after building using gbafix.
    a.byte(0x51);
    // Checksum
    a.byte(0x00, 0x00);

    ////////////////////////////////////////////////////////////////////////////
    // Decompression code
    ////////////////////////////////////////////////////////////////////////////

    // 1536 contexts would be sufficient, but 2048 is smaller.
    //constexpr auto INIT_ONE_PROB = 0x8000;
    constexpr auto ADJUST_SHIFT = 4;
    constexpr auto SINGLE_BIT_CONTEXTS = 1;
    //constexpr auto NUM_CONTEXTS = 2048;

    // Register aliases
    constexpr auto inp = r0;                // Compressed data
    constexpr auto outp = r1;               // Decompressed data
    constexpr auto tmp0 = r2;               // Scratch register 0
    constexpr auto tmp1 = r3;               // Scratch register 1
    constexpr auto rvalue = r4;             // Range value
    constexpr auto isize = r5;              // Interval size
    constexpr auto bitbuf = r6;             // Input bit buffer
    constexpr auto bitctx = r7;             // Bit context index
    constexpr auto offset = r8;             // Offset
    constexpr auto depacked_entry = r9;     // Entry point of depacked code

    constexpr auto getnumber_push_list = make_push_list(outp, lr);
    constexpr auto getbit_push_list = make_push_list(outp, tmp0, tmp1, lr);

    // Offset for accessing the context table relative to SP.
    constexpr auto CTX_TABLE_OFFSET = 4 * getbit_push_list.size() + 4 * getnumber_push_list.size() + 2 * SINGLE_BIT_CONTEXTS;

    a.align(2);
    // Initially the GBA is in ARM state. Switch to Thumb state first.
    a.label("code_start"s);
    a.arm_to_thumb(inp);
    a.adr(inp, "packed_intro"s);

    // Initialize output pointer(0x03000000 = IWRAM).
    // Save it for later since this is also the entry point.
    a.mov(outp, 3);
    a.lsl(outp, outp, 24);
    a.mov(depacked_entry, outp);

    // Initialize range decoder state.
    // rvalue will be set to 0 by the loop that follows.
    a.mov(isize, 1);
    a.lsl(bitbuf, isize, 31);

    // Initialize probabilities, writing two contexts per iteration.
    a.lsl(rvalue, isize, 10);       // rvalue = NUM_CONTEXTS / 2
    a.lsl(bitctx, isize, 15);       // bitctx = (INIT_ONE_PROB << 16) | INIT_ONE_PROB
    a.orr(bitctx, bitbuf);
    a.label("init"s);
    a.push(bitctx);
    a.sub(rvalue, 1);
    a.bne("init"s);
    // Now rvalue is 0

    // Main decompression loop.
    a.label("literal"s);
    a.mov(tmp0, 1);
    a.label("getlit"s);
    a.lsl(bitctx, outp, 31);        // bitctx = ((outp & 1) << 8) | current_byte
    a.lsr(bitctx, bitctx, 23);
    a.orr(bitctx, tmp0);
    a.bl("getbit"s);
    a.adc(tmp0, tmp0);
    a.cmp(tmp0, 255);
    a.bls("getlit"s);
    a.strb(tmp0, outp, 0);
    a.add(outp, 1);
    a.label("switch"s);
    // After literal
    a.bl("getkind"s);
    a.bcc("literal"s);
    // Reference
    a.mov(bitctx, 0);               // bitctx = -1
    a.sub(bitctx, 1);
    a.bl("getbit"s);
    a.bcc("readoffset"s);
    a.label("readlength"s);
    a.mov(tmp0, 4);
    a.bl("getnumber"s);
    a.mov(tmp0, offset);
    a.neg(tmp0, tmp0);
    a.label("copyloop"s);
    a.ldrb(bitctx, outp, tmp0);
    a.strb(bitctx, outp, 0);
    a.add(outp, 1);
    a.sub(tmp1, 1);
    a.bne("copyloop"s);
    // After reference
    a.bl("getkind"s);
    a.bcc("literal"s);
    a.label("readoffset"s);
    a.mov(tmp0, 3);
    a.bl("getnumber"s);
    a.sub(tmp1, 2);
    a.mov(offset, tmp1);
    a.bne("readlength"s);
    a.label("donedecompressing"s);
    a.mov(r0, depacked_entry);
    a.bx(r0);

    ////////////////////////////////////////////////////////////////////////////
    // getnumber: decode variable length number
    // In:  tmp0 = Base context / 256. That is, call with tmp0 = 3 or tmp0 = 4.
    // Out: tmp1 = Number
    ////////////////////////////////////////////////////////////////////////////
    a.label("getnumber"s);
    a.push(getnumber_push_list);
    a.lsl(tmp0, tmp0, 8);
    a.mov(outp, 0);
    a.label("numberloop"s);
    a.add(outp, 2);
    a.mov(bitctx, tmp0);
    a.orr(bitctx, outp);
    a.bl("getbit"s);
    a.bcs("numberloop"s);
    a.mov(tmp1, 1);
    a.sub(outp, 1);
    a.label("bitsloop"s);
    a.mov(bitctx, tmp0);
    a.orr(bitctx, outp);
    a.bl("getbit"s);
    a.adc(tmp1, tmp1);
    a.sub(outp, 2);
    a.bcs("bitsloop"s);
    a.pop(to_pop_list(getnumber_push_list));

    ////////////////////////////////////////////////////////////////////////////
    // getkind: figure out whether the next symbol is a literal or a reference
    // In:  Nothing, sets up bitctx itself
    // Out: C = 0 if the next symbol is a literal, C = 1 if it is a reference
    //      bitctx = parity
    ////////////////////////////////////////////////////////////////////////////
    a.label("getkind"s);
    // Use parity as context : bitctx = (outp & 1) << 8
    a.lsl(bitctx, outp, 31);
    a.lsr(bitctx, bitctx, 23);
    // Fall through into getbit

    ////////////////////////////////////////////////////////////////////////////
    // getbit: decode a single bit
    // In:       bit context index in bitctx
    // Out:      Bit in C. That is, C=1 is a bit with value 1.
    // Destroys: bitctx
    // Keeps its state in bitbuf, isize and rvalue. So these must not be modified.
    ////////////////////////////////////////////////////////////////////////////
    a.label("getbit"s);
    a.push(getbit_push_list);
    a.b("loop_condition"s);
    a.label("readbit"s);
    a.lsl(bitbuf, bitbuf, 1);
    a.bne("nonewword"s);
    a.label("newword"s);
    a.ldr(bitbuf, inp, 0);
    a.add(inp, 4);
    // Shift data bit into C and make bit 0 the new sentinel bit.
    a.add(bitbuf, bitbuf);
    a.mov(tmp0, 1);
    a.orr(bitbuf, tmp0);
    a.label("nonewword"s);
    a.adc(rvalue, rvalue);
    a.add(isize, isize);
    a.label("loop_condition"s);
    a.lsr(tmp0, isize, 16);         // Loop while bit 15 is clear
    a.bcc("readbit"s);

    // Context is at : SP + CTX_TABLE_OFFSET + 2 * bitctx
    a.add(tmp0, bitctx, bitctx);
    a.add(tmp0, sp);

    // tmp1 = probability
    a.ldrh(tmp1, tmp0, CTX_TABLE_OFFSET);

    // outp = threshold = (intervalsize * prob) >> 16
    a.mov(outp, tmp1);
    a.mul(outp, isize);
    a.lsr(outp, outp, 16);

    // prob = prob - (prob >> ADJUST_SHIFT)
    a.lsr(bitctx, tmp1, ADJUST_SHIFT);
    a.sub(tmp1, tmp1, bitctx);

    a.sub(rvalue, rvalue, outp);
    a.bcc("one"s);
    a.label("zero"s);
    a.sub(isize, isize, outp);      // intervalsize -= threshold
    a.add(tmp1, 0);                 // C = 0, bit = 0
    a.b("done"s);
    a.label("one"s);
    a.mov(isize, outp);
    a.ldr(bitctx, 0xffff >> ADJUST_SHIFT);
    a.add(tmp1, bitctx);
    a.add(rvalue, outp);            // C = 1, bit = 1
    a.label("done"s);
    a.strh(tmp1, tmp0, CTX_TABLE_OFFSET);
    a.pop(to_pop_list(getbit_push_list));
    a.pool();

    ////////////////////////////////////////////////////////////////////////////
    // Compressed intro.
    // Must be word aligned, since the packer reads entire words from the bitstream.
    ////////////////////////////////////////////////////////////////////////////
    a.align(2);
    a.label("packed_intro"s);
    a.incbin(compressed_intro, compressed_intro + std::size(compressed_intro));

    // Compare assembled and linked program with expected binary.
    CHECK_PROGRAM(a, 0x08000000, bytevector(expected_binary, expected_binary + std::size(expected_binary)));
}

}
